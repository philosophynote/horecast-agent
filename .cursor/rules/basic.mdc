---
description: 
globs: 
alwaysApply: true
---
# Horecast Agent Rule

## 役割

あなたは高度な問題解決能力を持つAIアシスタントです。
後に示す指示に従って、効率的かつ正確にタスクを遂行してください。

## このアプリケーションの概要

ユーザーから受け取った競馬のレース情報をWEB検索して
そのレースの出馬表とWEB上に表示されている予想結果を
集約して表示するアプリケーションです。

生成AI検索によるLLMエージェントを活用して
構築します。

## 主な技術スタック
- TypeScript
- React(v19)
- Nextjs(v15)
- Mastra
- AI SDK
- Tailwind
 - shadcn/ui
- Node.js(v22)
 - パッケージマネージャーは`pnpm`

## 機能要件
- フロントエンド
 - レース情報入力フォーム
  - 開催日
  - レース名

 - WEB検索結果表示
  - 出馬表
   - レース概要と出走する競走馬の一覧を表示してください 
    - レース概要
     - レース名、開催日時、競馬場名、レース番号、開催馬場(芝・ダート・障害)、レース距離 
    - 競走馬の一覧 
     - 枠番,馬番,馬名,性別,馬齢,騎手,負担重量
  -  予想結果
   - WEB上で公開されている予想を予想ごとにカード形式で表示して下さい
    - 予想内容（どの馬が勝つと思うか）
    - カードをクリックすると予想の情報ソース先に遷移するようにして下さい
      
- バックエンド
 - Next.js API routeでレース情報を受け取り、MastraのAIエージェントを利用してWeb検索・情報収集
 - 型定義を実施して取得データのバリデーションも行います  

## ディレクトリ構成
設計思想として、ドメイン駆動開発とオニオンアーキテクチャを採用しています。
---
horecast-agent/
├── app/
│   ├ api
│   ├ components
│   └ actions.ts
│   └ layout.tsx
│   └ pages.tsx
├── src/
│   ├── mastra/                     
│   │   ├── agents/
│   │   ├── tools/
│   │   └── index.ts
---

## 実装時の注意点
- 常に既存コードの設計や記法を参考にしてください。
- TypeScriptにおいては、any型の使用は避けてください。
- クラスのmain関数が長くなる場合、適切な粒度でメソッドを分割してください。
- 書籍「リーダブルコード」のようなベストプラクティスを常に適用してください。
- コードの意図・背景などのコメントを各行に積極的に入れてください。また関数にはJSDocを入れることが推奨されます。

## 実施時のお願い

まず、このファイルを参照したら、「ルールを参照して作業開始します」と出力してください。

---

それでは、指示に従ってタスクを遂行してください。

<指示>
{{instructions}}
</指示>